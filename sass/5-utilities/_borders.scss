@mixin borders() {
	@for $i from 1 through $border-width-range {
		&border-#{$i}px {
			border: #{$i}px solid;
		}
		&border-t-#{$i}px {
			border-top: #{$i}px solid;
		}
		&border-r-#{$i}px {
			border-bottom: #{$i}px solid;
		}
		&border-b-#{$i}px {
			border-bottom: #{$i}px solid;
		}
		&border-l-#{$i}px {
			border-left: #{$i}px solid;
		}
	}

	&border-none {
		border: none;
	}

	@each $key, $val in $color-loop-array {
		&border-#{$key} {
			border-color: $val;

			@for $i from 0 through 5 {
				&-#{100 - ($i * 10)} {
					@if saturation($val) < 1% {
						border-color: hsl(
							hue($val),
							saturation($val),
							lightness($val) + $i * ((95 - lightness($val)) / 5)
						);
					} @else {
						border-color: hsl(
							hue($val),
							saturation($val) + $saturation-range,
							lightness($val) + $i * ((95 - lightness($val)) / 5)
						);
					}
				}
			}

			@for $i from 0 through 5 {
				&-#{100+($i * 10)} {
					@if saturation($val) < 1% {
						border-color: hsl(
							hue($val),
							saturation($val),
							lightness($val) - $i * (lightness($val) / 6)
						);
					} @else {
						border-color: hsl(
							hue($val),
							saturation($val) - $saturation-range,
							lightness($val) - $i * (lightness($val) / 6)
						);
					}
				}
			}
		}
	}

	@for $i from 1 through $border-radius-range {
		&rounded-#{$i}px {
			border-radius: #{$i}px;
		}
	}

	&rounded-full {
		border-radius: 50%;
	}
}
