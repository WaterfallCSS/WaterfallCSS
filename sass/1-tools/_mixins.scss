@mixin screen-xsmall() {
	@media all and (#{$media-query-prefix}-width: $breakpoint-xsmall) {
		@content;
	}
}

@mixin screen-small() {
	@media all and (#{$media-query-prefix}-width: $breakpoint-small) {
		@content;
	}
}

@mixin screen-medium() {
	@media all and (#{$media-query-prefix}-width: $breakpoint-medium) {
		@content;
	}
}

@mixin screen-large() {
	@media all and (#{$media-query-prefix}-width: $breakpoint-large) {
		@content;
	}
}

@mixin dimensions($width, $height) {
	width: $width;
	height: $height;
}

@mixin absolute-center() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

// prettier-ignore
@mixin generate-colors($prefix, $property) {
	@each $key, $val in $color-loop-array {
		&#{$prefix}-#{$key} {
			#{$property}: $val;

			@if $key != black or $key != white {

				@for $i from 1 through 3 {
					&-#{nth($dark-color-naming-array, $i)} {
						#{$property}: hsl(
							hue($val),
							saturation($val) - if(saturation($val) < 1%, 0, $saturation-range),
							lightness($val) - $i * ((lightness($val) - $minimum-color-lightness) / 3)
						);
					}
				}
	
				@for $i from 1 through 3 {
					&-#{nth($light-color-naming-array, $i)} {
						#{$property}: hsl(
							hue($val),
							saturation($val) + if(saturation($val) < 1%, 0, $saturation-range),
							lightness($val) +
								$i *
								(($maximum-color-lightness - lightness($val)) / 3)
						);
					}
				}

			}
		}
	}
}
